import numpy as np
from scipy import signal
from scipy.fftpack import fft, fftshift
import matplotlib.pyplot as plt
import pandas as pd
from operator import itemgetter

def cars_move(v_min, v_max, dt, num, v_ideal, tot_timeframe):
    vel = []
    position = []
    for i in range(0, num):
        v0 = np.random.randint(v_min, v_max) #km/h
        x0 = np.random.randint(0,10000)/1000 #km
        vel.append(v0)
        position.append(x0)
    car_info = np.column_stack((vel,position)) 
    car_info_sorted = np.array(sorted(car_info,key=itemgetter(1),reverse=True))
    
    for j in range(0, num):
        print('Car', j+1)
        print('')
        for d in range(0, tot_timeframe+1):
            if d == 0:
                if car_info_sorted[j,0] < v_ideal:
                    acc = 2 #km/h/s
                    car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                    car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                    print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                    print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                    print('It accelerated as there is no car in front')
                    print('')
                else:  
                    acc = 0 #km/h/s
                    car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                    car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                    print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                    print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                    print('It stayed at the same speed as it is at the ideal speed')
                    print('')
                
            elif car_info_sorted[j,0] < v_ideal:
                if car_info_sorted[j-1,0] < v_ideal:
                    if car_info_sorted[j-1,0] >= car_info_sorted[j,0]:
                        acc = 2 #km/h/s
                        car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                        car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                        print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                        print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                        print('It accelerated as the car in front is faster')
                        print('')
                    elif car_info_sorted[j-1,0] < car_info_sorted[j,0]:
                        if car_info_sorted[j-1,1] - car_info_sorted[j,1] > 0.08:
                            acc = 2 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It accelerated as there is enough space to accelerate into despite the car in front being slower')
                            print('')
                        elif car_info_sorted[j-1,1] - car_info_sorted[j,1] <= 0.08:
                            acc = -5 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It decelerated as there is not enough space to accelerate into and the car in front is slower')
                            print('')

                elif car_info_sorted[j-1,0] >= v_ideal:
                    if car_info_sorted[j-1,0] >= car_info_sorted[j,0]:
                        if car_info_sorted[j-1,1] - car_info_sorted[j,1] > 0.04:
                            acc = 2 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It accelerated as there is enough distance to the car in front despite that car being slower')
                            print('')
                        elif car_info_sorted[j-1,1] - car_info_sorted[j,1] <= 0.04: 
                            acc = 0 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It stayed at the same speed as there is not enough reasonable space to accelerate into')
                            print('')

            elif car_info_sorted[j,0] >= v_ideal:
                if car_info_sorted[j-1,0] < v_ideal:
                    if car_info_sorted[j,0] > car_info_sorted[j-1,0]:
                        if car_info_sorted[j-1,1] - car_info_sorted[j,1] > 0.04:
                            acc = 0 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It stayed at the same speed as it is at the ideal speed')
                            print('')
                        elif car_info_sorted[j-1,1] - car_info_sorted[j,1] <= 0.04: 
                            acc = -5 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It decelerated as there was not enough space in front')
                            print('')
                elif car_info_sorted[j-1,0] >= v_ideal:
                    if car_info_sorted[j,0] > car_info_sorted[j-1,0]:
                        if car_info_sorted[j-1,1] - car_info_sorted[j,1] > 0.04:
                            acc = 0 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It stayed at the same speed as it is at the ideal speed')
                            print('')
                        elif car_info_sorted[j-1,1] - car_info_sorted[j,1] <= 0.04: 
                            acc = -5 #km/h/s
                            car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                            car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                            print('It decelerated as there was not enough space in front')
                            print('')    
                    elif car_info_sorted[j-1,0] >= car_info_sorted[j,0]:
                        acc = 0 #km/h/s
                        car_info_sorted[j,0] = car_info_sorted[j,0] + acc*dt
                        car_info_sorted[j,1] = car_info_sorted[j,1] + car_info_sorted[j,0]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                        print(car_info_sorted[j,0], 'Velocity at t=', d*dt, 'seconds')
                        print(car_info_sorted[j,1], 'Position at t=', d*dt, 'seconds')
                        print('It stayed at the same speed as it is at the ideal speed')
                        print('')









