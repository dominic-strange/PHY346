#add lane, crash and vehicle dimensions

import numpy as np
import matplotlib.pyplot as plt
from operator import itemgetter

def cars_move_explain(v_min, v_max, dt, num, v_ideal, tot_timeframe):
    order = [x for x in range(1, num+1)]
    vel = []
    position = []
    lane = []
    for i in range(0, num):
        v0 = np.random.randint(v_min, v_max) #km/h
        x0 = np.random.randint(0,10000)/1000 #km
        L = np.random.choice(3, 1, p=[0.6, 0.3, 0.1]) + 1
        vel.append(v0)
        position.append(x0)
        lane.append(L)
    car_info = np.column_stack((vel,position,lane)) 
    car_info_sorted = np.column_stack((order,sorted(car_info,key=itemgetter(1),reverse=True)))
    
    for d in range(1, tot_timeframe+1):
        print('t = ' ,d*dt, 'seconds')
        for j in range(0, num):
            print('Car', car_info_sorted[j,0])
            X = 0
            for c in range(0, num):
                if car_info_sorted[j,3] == car_info_sorted[c,3] and car_info_sorted[j,0] - car_info_sorted[c,0]  > 0:
                    X = int(car_info_sorted[j,0] - car_info_sorted[c,0])
                if c - j >= 0:
                    break
            print(X)    
             
                
                
            if X == 0:
                if car_info_sorted[j,1] < v_ideal:
                    acc = 2 #km/h/s
                    car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                    car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                    print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                    print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                    print('Car is in lane', car_info_sorted[j,3])
                    print('It accelerated as there is no car in front')
                    
                else:  
                    acc = 0 #km/h/s
                    car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                    car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                    print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                    print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                    print('Car is in lane', car_info_sorted[j,3])
                    print('It stayed at the same speed as it is at the ideal speed')
                   
                
            elif car_info_sorted[j,1] < v_ideal:
                if car_info_sorted[j-X,1] < v_ideal:
                    if car_info_sorted[j-X,1] >= car_info_sorted[j,1]:
                        acc = 2 #km/h/s
                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                        print('Car is in lane', car_info_sorted[j,3])
                        print('It accelerated as the car in front is faster')
                      
                    elif car_info_sorted[j-X,1] < car_info_sorted[j,1]:
                        if car_info_sorted[j-X,2] - car_info_sorted[j,2] > 0.08:
                            acc = 2 #km/h/s
                            car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                            car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                            print('Car is in lane', car_info_sorted[j,3])
                            print('It accelerated as there is enough space to accelerate into despite the car in front being slower')
                          
                        elif car_info_sorted[j-X,2] - car_info_sorted[j,2] <= 0.08:
                            for q in range(0, num):
                                if car_info_sorted[q,2]-0.02 <= car_info_sorted[j,2]<= car_info_sorted[q,2]+0.02 and car_info_sorted[q,3] == (car_info_sorted[j,3] + 1):
                                    acc = -5 #km/h/s
                                    car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                    car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                    print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                    print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                    print('Car is in lane', car_info_sorted[j,3])
                                    print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it is unsafe to switch lanes')#add switch lane functionality
                                    break
                                else:
                                    prob = np.random.choice(2, 1, p=[0.5, 0.5])
                                    if prob == 0:
                                        acc = -5 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it chose not to switch lanes')#add switch lane functionality
                                        break
                                    elif prob == 1 and car_info_sorted[j,3] == 1 or car_info_sorted[j,3] == 2:
                                        acc = 0 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        car_info_sorted[j,3] = car_info_sorted[j,3] + 1
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It switched as there is not enough space to accelerate into and the car in front is slower and it chose to switch lanes')#add switch lane functionality
                                        break
                                    else:
                                        acc = -5 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it cannot change lanes to overtake')#add switch lane functionality
                                        break
                                        
                                        


                elif car_info_sorted[j-X,1] >= v_ideal:
                    if car_info_sorted[j-X,1] >= car_info_sorted[j,0]:
                        if car_info_sorted[j-X,2] - car_info_sorted[j,2] > 0.04:
                            acc = 2 #km/h/s
                            car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                            car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                            print('Car is in lane', car_info_sorted[j,3])
                            print('It accelerated as there is enough distance to the car in front despite that car being slower')
                        
                        elif car_info_sorted[j-X,2] - car_info_sorted[j,2] <= 0.04: 
                            acc = 0 #km/h/s
                            car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                            car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                            print('Car is in lane', car_info_sorted[j,3])
                            print('It stayed at the same speed as there is not enough reasonable space to accelerate into')
                        

            elif car_info_sorted[j,1] >= v_ideal:
                if car_info_sorted[j-X,1] < v_ideal:
                    if car_info_sorted[j,1] > car_info_sorted[j-X,1]:
                        if car_info_sorted[j-X,2] - car_info_sorted[j,2] > 0.04:
                            acc = 0 #km/h/s
                            car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                            car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                            print('Car is in lane', car_info_sorted[j,3])
                            print('It stayed at the same speed as it is at the ideal speed')
                           
                        elif car_info_sorted[j-X,2] - car_info_sorted[j,2] <= 0.04: 
                            for q in range(0, num):
                                if car_info_sorted[q,2]-0.02 <= car_info_sorted[j,2]<= car_info_sorted[q,2]+0.02 and car_info_sorted[q,3] == (car_info_sorted[j,3] + 1):
                                    acc = -5 #km/h/s
                                    car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                    car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                    print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                    print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                    print('Car is in lane', car_info_sorted[j,3])
                                    print('It decelerated as there is not enough space to accelerate into and it is unsafe to switch lanes')#add switch lane functionality
                                    break
                                else:
                                    prob = np.random.choice(2, 1, p=[0.5, 0.5])
                                  
                                    if prob == 0:
                                        acc = -5 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it chose not to switch lanes')#add switch lane functionality
                                        break
                                    elif prob == 1 and car_info_sorted[j,3] == 1 or car_info_sorted[j,3] == 2:
                                        acc = 0 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        car_info_sorted[j,3] = car_info_sorted[j,3] + 1
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It switched as there is not enough space to accelerate into and the car in front is slower and it chose to switch lanes')#add switch lane functionality
                                        break
                                    else:
                                        acc = -5 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it cannot change lanes to overtake')#add switch lane functionality
                                        break
                elif car_info_sorted[j-X,1] >= v_ideal:
                    if car_info_sorted[j,1] > car_info_sorted[j-X,1]:
                        if car_info_sorted[j-X,2] - car_info_sorted[j,2] > 0.04:
                            acc = 0 #km/h/s
                            car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                            car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                            print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                            print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                            print('Car is in lane', car_info_sorted[j,3])
                            print('It stayed at the same speed as it is at the ideal speed')
                            
                        elif car_info_sorted[j-X,2] - car_info_sorted[j,2] <= 0.04: 
                            for q in range(0, num):
                                if car_info_sorted[q,2]-0.02 <= car_info_sorted[j,2]<= car_info_sorted[q,2]+0.02 and car_info_sorted[q,3] == (car_info_sorted[j,3] + 1):
                                    acc = -5 #km/h/s
                                    car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                    car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                    print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                    print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                    print('Car is in lane', car_info_sorted[j,3])
                                    print('It decelerated as there is not enough space to accelerate into and it is unsafe to switch lanes')#add switch lane functionality
                                    break
                                else:
                                    prob = np.random.choice(2, 1, p=[0.5, 0.5])
                                    if prob == 0:
                                        acc = -5 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it chose not to switch lanes')#add switch lane functionality
                                        break
                                    elif prob == 1 and car_info_sorted[j,3] == 1 or car_info_sorted[j,3] == 2:
                                        acc = 0 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        car_info_sorted[j,3] = car_info_sorted[j,3] + 1
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It switched as there is not enough space to accelerate into and the car in front is slower and it chose to switch lanes')#add switch lane functionality
                                        break
                                    else:
                                        acc = -5 #km/h/s
                                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                                        print('Car is in lane', car_info_sorted[j,3])
                                        print('It decelerated as there is not enough space to accelerate into and the car in front is slower and it cannot change lanes to overtake')#add switch lane functionality
                                        break
                               
                    elif car_info_sorted[j-X,1] >= car_info_sorted[j,1]:
                        acc = 0 #km/h/s
                        car_info_sorted[j,1] = car_info_sorted[j,1] + acc*dt
                        car_info_sorted[j,2] = car_info_sorted[j,2] + car_info_sorted[j,1]*dt/3600 + 0.5*acc*dt*dt/3600 #3600 to account for dimensions
                        print(car_info_sorted[j,1], 'Velocity at t=', d*dt, 'seconds')
                        print(car_info_sorted[j,2], 'Position at t=', d*dt, 'seconds')
                        print('Car is in lane', car_info_sorted[j,3])
                        print('It stayed at the same speed as it is at the ideal speed')
                        
            for q in range(0, num):
                if car_info_sorted[j,3] == 2 or car_info_sorted[j,3] == 3:
                    if car_info_sorted[q,2]-0.02 <= car_info_sorted[j,2]<= car_info_sorted[q,2]+0.02 and car_info_sorted[q,3] == (car_info_sorted[j,3] - 1):
                        print('Unsafe to switch to slower lane')
                        break
                    else:
                        prob = np.random.choice(2, 1, p=[0.05, 0.95])
                        if prob == 0:
                            car_info_sorted[j,3] = car_info_sorted[j,3] - 1
                            print('Car moved to slower lane')
                            break
                        elif prob == 1:
                            print('Car chose not to switch lanes')
                            break
                else:
                     print('Car is in slowest lane')
                     break

